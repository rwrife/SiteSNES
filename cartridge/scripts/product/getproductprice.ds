/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Product : dw.catalog.Product
*   @output PriceStack: Object
*
*/
importPackage( dw.system );

function execute( args : PipelineDictionary ) : Number
{

	var Product : dw.catalog.Product = args.Product;
	if(Product.master && !Product.priceModel.isPriceRange() && Product.variationModel.variants.size() > 0)
		Product = Product.variationModel.variants[0];
					
	var topPromo : dw.campaign.Promotion = null;
	var prodPromosColl : dw.util.Collection = dw.campaign.PromotionMgr.getActiveCustomerPromotions().getProductPromotions(Product);
	
	if (prodPromosColl != null && prodPromosColl.size() > 0)
	{
		for (var i = 0; i < prodPromosColl.size(); i++)
		{
			if (!prodPromosColl[i].isBasedOnCoupons())
			{	
				topPromo = prodPromosColl[i];
				break;
			}
		}
	}	
	
	var promotionalPricing = null;
	var callOut : String = null;
	
	if(topPromo && !empty(topPromo))
	{
		promotionalPricing = dw.campaign.PromotionMgr.getPromotion(topPromo.ID).getPromotionalPrice(Product);
		var promotion = dw.campaign.PromotionMgr.getPromotion(topPromo.ID);
		if( promotion ) { // Walking the items to ensure we don't have a null item
			if( promotion.getCalloutMsg() ) {
				callOut =  promotion.getCalloutMsg().valueOf();	
			}	
		}
	}
		
	var PriceModel = Product.getPriceModel();
	var PriceStack : dw.util.HashMap = new dw.util.HashMap();

	if(PriceModel != null && PriceModel.priceInfo != null)
	{
		var parentPB = null;
		if(PriceModel.priceInfo.getPriceBook().getParentPriceBook() != null) {
			parentPB = PriceModel.priceInfo.getPriceBook().getParentPriceBook().getID();
		} else {
			parentPB = PriceModel.priceInfo.getPriceBook().getID();
		}
		
		
		
		if(parentPB != null) {
			PriceStack.put("regular",{'price':PriceModel.getPriceBookPrice(parentPB).value});
		} else {
			PriceStack.put("regular",{'price':PriceModel.getPrice().value});
		}
		
		PriceStack.put("sale", {'price':PriceModel.getPrice().value});
		
		if(PriceModel.priceInfo.getPriceBook().getParentPriceBook()) {			
			PriceStack.put("regular",{'price':PriceStack.get("regular").price});
		} else {
			if(PriceStack.get("regular").price.value > PriceStack.get("sale").price.value){
				PriceStack.put("regular",{'price':PriceStack.get("regular").price});
			} else {
				if(promotionalPricing == null || promotionalPricing == dw.value.Money.NOT_AVAILABLE) {
					PriceStack.put("regular",{'price':PriceStack.get("regular").price});						
				} else {						
					var percentOff = (((PriceStack.get("regular").price - promotionalPricing) / PriceStack.get("regular").price)*100).toFixed();
					PriceStack.put("sale", { 'price':promotionalPricing, 'percentoff':parseFloat(percentOff,10)}); 											
				}
			}
		}

		if(PriceStack.get("regular").price > PriceStack.get("sale").price){
			if(promotionalPricing == null || promotionalPricing == dw.value.Money.NOT_AVAILABLE) {
				var percentOff = (((PriceStack.get("regular").price - PriceStack.get("sale").price) / PriceStack.get("regular").price)*100).toFixed();
				PriceStack.put("sale", {'price':PriceStack.get("sale").price, 
								'percentoff':parseFloat(percentOff,10)});
			} else {
				var percentOff = (((PriceStack.get("regule").price - promotionalPricing) / PriceStack.get("regular").price)*100).toFixed();
				PriceStack.put("sale", { 'price':promotionalPricing.value, 
												'callout':callOut,
												'percentoff':parseFloat(percentOff,10)});
			}
		}
	} else
	{ 
		if(Product.master && Product.priceModel.isPriceRange()) 
			PriceStack.put("regular",{'price':Product.priceModel.maxPrice.value, 'minprice':Product.priceModel.minPrice.value});	
		else
			return null;
	}
	
	
	if(PriceStack.get("sale")!= null && PriceStack.get("sale").price == PriceStack.get("regular").price)
		PriceStack.remove("sale");

	args.PriceStack = PriceStack;
   return PIPELET_NEXT;
}
